/* AFE Firmware for smart home devices
  LICENSE: https://github.com/tschaban/AFE-Firmware/blob/master/LICENSE
  DOC: https://www.smartnydom.pl/afe-firmware-pl/ */

#if defined(ARDUINO) && ARDUINO >= 100
#include "arduino.h"
#else
#include "WProgram.h"
#endif

/* Method is launched after MQTT Message is received */
void MQTTMessagesListenerX(char *topic, byte *payload, unsigned int length) {
  char _mqttTopic[70];
  Led.on();
  if (length >= 1) { // command arrived
    /* RELAY */
    sprintf(_mqttTopic, "%srelay/cmd", MQTTConfiguration.topic);
    if (strcmp(topic, _mqttTopic) == 0) {
      if ((char)payload[1] == 'n') {
        Relay[0].on();
        Mqtt.publish(Relay[0].getMQTTTopic(), "state", "on");
      } else if ((char)payload[1] == 'f') {
        Relay[0].off();
        Mqtt.publish(Relay[0].getMQTTTopic(), "state", "off");
      } else if ((char)payload[1] == 'e') {
        MQTTPublishRelayState(0);
      }
    }
    /* CONTACTRON */
    for (uint8_t i = 0; i < sizeof(Device.configuration.isContactron); i++) {
      if (Device.configuration.isContactron[i]) {
        sprintf(_mqttTopic, "%scmd", Gate.Contactron[i].getMQTTTopic());
        if (strcmp(topic, _mqttTopic) == 0 && (char)payload[1] == 'e') { // get
          MQTTPublishContactronState(i);
        }
      } else {
        break;
      }
    }
    /* GATE */
    sprintf(_mqttTopic, "%sgate/cmd", MQTTConfiguration.topic);
    if (strcmp(topic, _mqttTopic) == 0) {
      if ((char)payload[2] == 'e' && length == 4) { // open
        Relay[0].on();
        MQTTPublishRelayState(0);
      } else if ((char)payload[2] == 'o' && length == 5) { // close
        Relay[0].on();
        MQTTPublishRelayState(0);
      } else if ((char)payload[2] == 't' && length == 3) { // get
        MQTTPublishGateState();
      }
    }

    sprintf(_mqttTopic, "%scmd", MQTTConfiguration.topic);
    if (strcmp(topic, _mqttTopic) == 0) {
      if ((char)payload[2] == 'b' && length == 6) { // reboot
        Device.reboot(MODE_NORMAL);
      } else if ((char)payload[2] == 'n' && length == 17) { // configurationMode
        Device.reboot(MODE_CONFIGURATION);
      } else if ((char)payload[2] == 't' && length == 14) { // getTemperature
        char temperatureString[6];
        dtostrf(SensorDHT.getTemperature(), 2, 2, temperatureString);
        Mqtt.publish("temperature", temperatureString);
      } else if ((char)payload[2] == 't' && length == 11) { // getHumidity
        char humidityString[6];
        dtostrf(SensorDHT.getHumidity(), 2, 2, humidityString);
        Mqtt.publish("humidity", humidityString);
      } else if ((char)payload[2] == 't' && length == 12) { // getHeatIndex
        char heatIndex[6];
        dtostrf(SensorDHT.getHeatIndex(), 2, 2, heatIndex);
        Mqtt.publish("heatIndex", heatIndex);
      }
    }
  }
  Led.off();
}

/* Metod publishes Relay state (used eg by HTTP API) */
void MQTTPublishRelayStateX(uint8_t id) {
  if (Device.configuration.mqttAPI) {
    Mqtt.publish("relay/state", Relay[id].get() == RELAY_ON ? "on" : "off");
  }
}

/* Metod publishes Contactoron state (used eg by HTTP API) */
void MQTTPublishContactronStateX(uint8_t id) {
  if (Device.configuration.mqttAPI) {
    Mqtt.publish(Gate.Contactron[id].getMQTTTopic(), "state",
                 Gate.Contactron[id].get() == CONTACTRON_OPEN ? "open"
                                                              : "closed");
  }
}

void MQTTPublishGateStateX() {
  if (Device.configuration.mqttAPI) {
    uint8_t gateState = Gate.get();
    Mqtt.publish("gate/state", gateState == GATE_OPEN
                                   ? "open"
                                   : gateState == GATE_CLOSED
                                         ? "closed"
                                         : gateState == GATE_PARTIALLY_OPEN
                                               ? "partiallyOpen"
                                               : "unknown");
  }
}
